install.packages(KernSmooth)
source("https://www.bioconductor.org/biocLite.R")
biocLite("KernSmooth")
library(biocLite)
library("biocLite")
source("https://www.bioconductor.org/biocLite.R")
library(biocLite)
biocLite("KernSmooth")
library(KernSmooth)
set.seed(1)
rpois(5, 2)
? rnorm
? qpois
? dpois
system.time()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x = c(1:50))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeVector(1:100)
cachemean(test)
sqmtx <- matrix(sample(1:100, 16), 4, 4)
solve(sqmtx)
test
environment()
ls(environment())
ls()
cacheSolve <- function(x, ...) {
m <- x$getsolution()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolution(m)
m
}
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
setsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
setsolve = solve)
}
test <- makeVector(1:10)
cachemean(test)
test2 <- makeMatrix(1:16, 4, 4)
? matrix
test2 <- matrix(1:16, 4,4)
makeMatrix(test2)
object <- makeMatrix(test2)
cacheSolve(object)
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
setsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cachesolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
rm(cacheSolve)
object <- makeMatrix(test2)
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
object <- makeMatrix(test2)
cachesolve(objecty)
cachesolve(object\)
cachesolve(object)
solve(matrix(1:16,4,4))
solve(matrix(2:17,4,4))
matrix(1:16,4,4)
matrix(sample(1:16, 16),4,4)
solve(matrix(sample(1:16, 16),4,4))
object <- matrix(sample(1:16, 16),4,4)
object <- makeMatrix(object)
cachesolve(object)
object
object$get()
object$get
myvector <- makeVector(1:15)
myvector$x
myvector$get(x)
myvector$get()
myvector
myvector$set(1:20)
myvector$get()
object <- makeMatrix(matrix(2:17, 4, 4))
object
cachesolve(object)
solve(matrix(2:17, 4, 4))
solve(matrix(sample(2:17, 16), 4, 4))
solve(matrix(sample(2:17, 16), 4, 4))
solve(matrix(sample(2:17, 16), 4, 4))
object <- makeMatrix(matrix(sample(2:17, 16), 4, 4))
cachesolve(object)
? subSetData
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
as.dendrogra(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple", pch = 3, cex = 2, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2))
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
midst(x, y, cx, cy)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y , newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y , col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
q()
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addpatt.R")
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*diag*t(matv)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd$1d
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,c(1,2)]
svd2$d
dim(faceData)
svd1$u * svd1$d[1] %*% svd1$v
svd1$u %*% svd1$d[1] %*% svd1$v
svd1$u %*% svd1$d[1]  svd1$v
svd1$u %*% svd1$d[1]  svd1$v
svd1$u %*% svd1$d[1] * svd1$v
svd1$u[,1] %*% svd1$d[1] * svd1$v[,1]
svd1$u[,1] %*% svd1$d[1] * t(svd1$v[,1])
svd1$u[,1] * svd1$d[1] %*% t(svd1$v[,1])
a1 <- svd1$u[,1] * svd1$d[1] %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1])%*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,c(1:2)] * svd1$d[1]) * svd1$v[,c(1:2)]
a2 <- (svd1$u[,c(1:2)] * svd1$d[1]) %*% svd1$v[,c(1:2)]
a2 <- (svd1$u[,c(1:2)] * svd1$d[1]) %*% t(svd1$v[,c(1:2)])
a2 <- svd1$u[,c(1:2)] %*% svd1$d[1:2] %*% t(svd1$v[,c(1:2)])
a2 <- svd1$u[,c(1:2)] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,c(1:2)])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(vd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
q()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, "subject" == 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit(showXY.R)
myedit("showXY.R")
swirl()
library(swirl)
swirl()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
setwd("E:/Coursera/Reproducible Research/")
setwd("E:/Coursera/Reproducible Research/repdata%2Fdata%2Factivity/")
dat <- read.csv("activity.csv", header=T)
rm(list=ls())
dat <- read.csv("activity.csv", header=T)
View(dat)
with(dat, table(steps, date))
with(dat, sum(steps, by=day))
with(dat, sum(steps, by=date))
? sum()
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
ls(package::dplyr)
ls(package:dplyr)
bydate <- group_by(dat, steps, date)
sumMean <- summarise(bydate, mean=n())
sumMean
View(sumMean)
View(dat)
sumMean <- summarise(bydate, mn=mean(steps))
View(sumMean)
bydate <- group_by(dat, date)
sumMean <- summarize(bydate, mn=mean(steps))
View(sumMean)
library(dplyr)
sumMean <- summarize(bydate, mn=mean(steps))
sumCount <- summarize(bydate, count=n(steps)
sumCount <- summarize(bydate, count=n(steps))
sumCount <- summarize(bydate, n=count(steps))
sumCount <- summarize(bydate, n=n(steps))
sumCount <- summarize(bydate, n=steps)
sumCount <- summarize(bydate, count=n())
View(sumCount)
sumCount <- summarize(bydate, sum=n())
? summarize
sumCount <- summarize(bydate, s=sum(steps))
hist(sumCount)
hist(sumCount$s ~ sumCount$date)
class(sumCount$s)
hist(as.numeric(sumCount$s) ~ sumCount$date)
? hist()
hist(sumCounts$s)
hist(sumCount$s)
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)))
hist(sumCount$s, breaks = c(seq(0, 25000, 1000)))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = (blue))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue")
? title
? hist
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", title = "Step Count Frequency", xlab = "Steps Taken")
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
hist(sumCount$s, breaks = c(seq(0, 22500, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
mean(dat$steps, na.rm=T); median(dat$steps, na.rm = T)
? mean
? median
sumMeanMed <- summarize(bydate, mn=mean(steps), med=median(steps))
rm(sumMean)
View(sumMeanMed)
sumMeanMed <- summarize(bydate, mn=mean(steps, na.rm = T), med=median(steps, na.rm = T))
View(sumMeanMed)
sumMeanMed <- summarize(bydate, mn=mean(steps), med=median(steps))
View(sumMeanMed)
sumMean_interval <- summarize(byInterval, m = mean(steps))
byInterval <- group_by(dat, interval)
sumMean_interval <- summarize(byInterval, m = mean(steps))
with(sumMean_interval, plot(steps ~ interval), type = l, main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken")
with(sumMean_interval, plot(m ~ interval), type = l, main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken")
View(sumMean_interval)
View(byInterval)
View(dat)
View(byInterval)
sumMean_interval <- summarize(byInterval, mn = mean(steps, na.rm = T))
View(sumMean_interval)
with(sumMean_interval, plot(mn ~ interval), type = l, main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken")
with(sumMean_interval, plot(mn ~ interval), type = "l", main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken")
with(sumMean_interval, plot(mn ~ interval, type = "l", main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken"))
length(is.na(dat$steps) == TRUE)
length(is.na(dat$steps == TRUE))
length(complete.cases(dat$steps) = FALSE)
length(complete.cases(dat$steps) == FALSE)
length(complete.cases(dat) == FALSE)
test <- c(seq(0, 10 , 1), NA, NA)
is.na(test)
length(is.na(test) == TRUE)
length(which(is.na(test) == TRUE))
length(which(is.na(dat) == FALSE))
length(which(is.na(dat) == TRUE))
length(which(is.na(dat) == TRUE))
sumMean_interval$interval[which(sumMean_interval$mn = max(sumMean_interval$mn))]
sumMean_interval$interval[which(sumMean_interval$mn == max(sumMean_interval$mn))]
? impute
missing_intervals <- dat$interval[which(dat$steps == NA)]
missing_intervals <- dat$interval[which(is.na(dat$steps) == TRUE)]
missingIntervals[300:400]
missing_intervals[300:400]
missing_intervals[2200:2500]
missing_intervals[1800:2000]
head(merge(sumMean_interval, missing_intervals))
dim(merge(sumMean_interval, missing_intervals))
? match
? merge
head(match(missing_intervals, sumMean_interval$interval))
missing_intervals <- dat[which(is.na(dat$steps) == TRUE)]
missing_intervals <- dat[which(is.na(dat$steps) == TRUE),]
View(missing_intervals)
imputed_data <- merge(missing_intervals, sumMean_interval, by = "interval")
View(imputed_data)
View(imputed_data)
sumMean_interval <- summarize(byInterval, steps = mean(steps, na.rm = T))
missing_intervals <- dat[which(is.na(dat$steps) == TRUE),]
imputed_data <- merge(missing_intervals, sumMean_interval, by = "interval")
View(imputed_data)
View(missing_intervals)
imputed_data <- merge(missing_intervals[,c(2,3)], sumMean_interval, by = "interval")
View(imputed_data)
Imputed_dat <- merge(imputated_data, dat, by = interval, all.y = T)
imputed_data <- merge(missing_intervals[,c(2,3)], sumMean_interval, by = "interval")
Imputed_dat <- merge(imputated_data, dat, by = interval, all.y = T)
Imputed_dat <- merge(imputed_data, dat, by = interval, all.y = T)
Imputed_dat <- merge(imputed_data, dat, by = "interval", all.y = T)
View(imputed_data)
View(Imputed_dat)
? sort
head(Imputed_dat[sort(Imputed_dat$date.x),])
dim(dat)
for(i in 1:dim(dat)[1]){
if(is.na(dat$steps[i]) == TRUE){
dat$steps[i] <- sumMean_interval$steps[which(sumMean_interval$interval == dat$interval[i])]
}
}
for(i in 1:dim(dat)[1]){
if(is.na(dat$steps[i]) == TRUE){
dat$steps[i] <- sumMean_interval$steps[which(sumMean_interval$interval == dat$interval[i])]
}
}
View(dat)
dat <- read.csv("activity.csv", header=T)
for(i in 1:dim(dat2)[1]){
if(is.na(dat2$steps[i]) == TRUE){
dat2$steps[i] <- sumMean_interval$steps[which(sumMean_interval$interval == dat2$interval[i])]
}
}
dat2 <- dat
for(i in 1:dim(dat2)[1]){
if(is.na(dat2$steps[i]) == TRUE){
dat2$steps[i] <- sumMean_interval$steps[which(sumMean_interval$interval == dat2$interval[i])]
}
}
View(byInterval)
View(dat2)
bydate2 <- group_by(dat2,date)
sumCount <- summarize(bydate, s=sum(steps))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
sumCount <- summarize(bydate, s=sum(steps))
bydate <- group_by(dat,date)
sumCount <- summarize(bydate, s=sum(steps))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
sumMeanMed <- summarize(bydate, mn=mean(steps), med=median(steps))
byInterval <- group_by(dat, interval)
sumMean_interval <- summarize(byInterval, steps = mean(steps, na.rm = T))
with(sumMean_interval, plot(steps ~ interval, type = "l", main = "Mean Steps per Interval", xlab = "Daily Interval", ylab = "Steps Taken"))
sumMean_interval$interval[which(sumMean_interval$steps == max(sumMean_interval$steps))]
length(which(is.na(dat) == TRUE))
dat2 <- dat
for(i in 1:dim(dat2)[1]){
if(is.na(dat2$steps[i]) == TRUE){
dat2$steps[i] <- sumMean_interval$steps[which(sumMean_interval$interval == dat2$interval[i])]
}
}
bydate2 <- group_by(dat2,date)
sumCount2 <- summarize(bydate2, s=sum(steps))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
hist(sumCount2$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
sumMeanMed2 <- summarize(bydate2, mn=mean(steps), med=median(steps))
head(sum(MeanMed2))
head(sumMeanMed2)
? weekdays
head(weekdays(dat2$date))
head(weekdays(as.date(dat2$date)))
? date
library(date)
install.packages(date, lubridate)
install.packages(date)
install.package(date)
install.packages("date","lubridate")
install.packages("lubridate")
library(date)
library(lubridate)
head(weekdays(as.date(dat2$date)))
head(dat2$date)
? ymd
head(weekdays(as.date(as.character(dat2$date))))
head(weekdays(ymd(as.character(dat2$date))))
dat2$day <- weekdays(ymd(as.character(dat2$date)))
? weekdays
dat2Weekday <- c()
dat2$weekday <- c()
View(dat2)
dat2$day <- weekdays(ymd(as.character(dat2$date))); dat2$weekday <- NA
View(dat2)
for(i in 1:dim(dat2)[1]){
if(dat2$day[i] == "Saturday" || dat2$day[i] == "Sunday"){
dat2$weekday[i] <- "weekend"
} else {dat2$weekday[i] <- "weekday"}
}
View(dat2)
dat2$weekday <- as.factor(dat2$weekday)
by_weekday <- group_by(dat2, interval, weekday)
sumMean_interval_weekday <- summarize(by_weekday, steps = mean(steps))
View(sumMean_interval_weekday)
par(2,1)
with(sumMean_interval_weekday[weekday == "weekday",],  plot(steps ~ interval))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval))
par(mfrow=c(2,1))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)"))
par(mfrow=c(2,1))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 150), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)"), ylim = c(0, 150), type = "l")
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 200), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)"), ylim = c(0, 200), type = "l")
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 225), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)", ylim = c(0, 225), type = "l")
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 250), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)", ylim = c(0, 250), type = "l"))
par(mfrow=c(2,1))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 250), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)", ylim = c(0, 250), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekday",],  plot(steps ~ interval, main = "Steps Taken (Weekday)", ylim = c(0, 240), type = "l"))
with(sumMean_interval_weekday[sumMean_interval_weekday$weekday == "weekend",],  plot(steps ~ interval, main = "Steps Taken (weekend)", ylim = c(0, 240), type = "l"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setwd("E:/Coursera/Reproducible Research/repdata%2Fdata%2Factivity/")
dat <- read.csv("activity.csv", header=T)
bydate <- group_by(dat,date)
sumCount <- summarize(bydate, s=sum(steps))
hist(sumCount$s, breaks = c(seq(0, 25000, 2500)), col = "blue", main = "Step Count Frequency", xlab = "Steps Taken")
head(sumCount2$s)
head(sumCount2)
View(dat2)
